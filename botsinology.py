
import asyncio
import logging
import sqlite3

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

TOKEN = "7697883646:AAGwwp-DtP9oIqGWE0LI1Oza4QuJuKquFoI"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

conn = sqlite3.connect("sinology_final.db")
cursor = conn.cursor()

user_data = {}

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–®–∫–æ–ª—ã —Å –∫–∏—Ç–∞–π—Å–∫–∏–º —É–∫–ª–æ–Ω–æ–º", callback_data="schools")
    builder.button(text="–ö—É—Ä—Å—ã –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞", callback_data="courses")
    builder.button(text="–í–£–ó—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ø–æ –∫–∏—Ç–∞–∏—Å—Ç–∏–∫–µ", callback_data="universities")
    builder.button(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", callback_data="extra")
    builder.adjust(1)
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏–Ω–æ–ª–æ–≥–∏–∏.\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∫–∏—Ç–∞–π—Å–∫–æ–º—É —è–∑—ã–∫—É –≤ –†–æ—Å—Å–∏–∏.\n–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data == "schools")
async def handle_schools(callback: CallbackQuery):
    user_data[callback.from_user.id] = {}
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞—á–∞–ª—å–Ω–∞—è —à–∫–æ–ª–∞", callback_data="age_primary")
    builder.button(text="–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞", callback_data="age_middle")
    builder.button(text="–°—Ç–∞—Ä—à–∞—è —à–∫–æ–ª–∞", callback_data="age_high")
    builder.adjust(1)
    await callback.message.edit_text("–î–ª—è –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—ã –∏—â–µ—Ç–µ —à–∫–æ–ª—É?", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("age_"))
async def handle_age(callback: CallbackQuery):
    age_map = {
        "age_primary": "–Ω–∞—á–∞–ª—å–Ω–∞—è",
        "age_middle": "—Å—Ä–µ–¥–Ω—è—è",
        "age_high": "—Å—Ç–∞—Ä—à–∞—è"
    }
    user_data[callback.from_user.id]["age"] = age_map[callback.data]
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞—á–∏–Ω–∞—é—â–∏–π (HSK 1-2)", callback_data="level_beginner")
    builder.button(text="–°—Ä–µ–¥–Ω–∏–π (HSK 3-4)", callback_data="level_intermediate")
    builder.button(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (HSK 5-6)", callback_data="level_advanced")
    builder.adjust(1)
    await callback.message.edit_text("–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∫–∏—Ç–∞–π—Å–∫–∏–º —è–∑—ã–∫–æ–º —É —Ä–µ–±—ë–Ω–∫–∞?", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("level_"))
async def handle_level(callback: CallbackQuery):
    level_map = {
        "level_beginner": "–Ω–∞—á–∏–Ω–∞—é—â–∏–π",
        "level_intermediate": "—Å—Ä–µ–¥–Ω–∏–π",
        "level_advanced": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }
    user_data[callback.from_user.id]["level"] = level_map[callback.data]
    user_data[callback.from_user.id]["waiting_city"] = True
    await callback.message.edit_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —à–∫–æ–ª—ã?")

async def send_schools_page(message: Message, uid: int):
    page = user_data[uid].get("page", 0)
    results = user_data[uid]["results"]
    total = len(results)
    per_page = 5
    start = page * per_page
    end = start + per_page
    page_results = results[start:end]

    for name, data in page_results:
        reply = f"üè´ <b>{name}</b>\n"
        reply += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}\n"
        reply += "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        for s in data['schedules']:
            reply += f"{s}\n\n"
        await message.answer(reply.strip(), parse_mode=ParseMode.HTML)

    if end < total:
        user_data[uid]["page"] += 1
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="next_schools")
        builder.adjust(1)
        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë —à–∫–æ–ª—ã?", reply_markup=builder.as_markup())
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÅ –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ —à–∫–æ–ª—ã", callback_data="schools")
        builder.adjust(1)
        await message.answer("–≠—Ç–æ –≤—Å–µ —à–∫–æ–ª—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
@router.message()
async def handle_city(message: Message):
    uid = message.from_user.id
    if user_data.get(uid, {}).get("waiting_city"):
        city = message.text.strip().lower()
        age = user_data[uid]["age"]
        level = user_data[uid]["level"]

        query = """
        SELECT school_name, contact, schedule FROM schools
        WHERE LOWER(city) = ?
          AND age_group = ?
          AND level = ?
        """
        cursor.execute(query, (city, age, level))
        rows = cursor.fetchall()

        if not rows:
            await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —à–∫–æ–ª –≤ –≥–æ—Ä–æ–¥–µ <b>{city.title()}</b> –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.", parse_mode=ParseMode.HTML)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
        schools = {}
        for name, contact, schedule in rows:
            if name not in schools:
                schools[name] = {"contact": contact, "schedules": []}
            schools[name]["schedules"].append(schedule)

        user_data[uid]["results"] = list(schools.items())
        user_data[uid]["page"] = 0
        user_data[uid]["waiting_city"] = False

        await send_schools_page(message, uid)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
@router.callback_query(F.data == "next_schools")
async def show_next_schools(callback: CallbackQuery):
    await send_schools_page(callback.message, callback.from_user.id)
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
